*Coding Problems* 

4. Magic Potion Identifier

def is_magical_potion(power):
    cube_root = round(power ** (1/3))
    if cube_root ** 3 == power:
        return "YES"
    else:
        return "NO"

# Example usage:
power = 132651201231
print(is_magical_potion(power))

5. Sneaky outcomes
def find_duplicates(outcomes):
    frequency = {}
    duplicates = []
    
    for outcome in outcomes:
        if outcome in frequency:
            duplicates.append(outcome)
        else:
            frequency[outcome] = 1
    
    return duplicates

6. Reformat String to Alternating Case

def reformat_string(s):
    result = []
    toggle = True  # Start with uppercase

    for char in s:
        if char.isalpha():
            if toggle:
                result.append(char.upper())
            else:
                result.append(char.lower())
            toggle = not toggle  # Toggle the case for the next alphabetical character
        else:
            result.append(char)  # Non-alphabetical characters remain unchanged

    return ''.join(result)


7. Organizing Books into Identical Sets

from math import gcd
from functools import reduce

def can_organize_books(shelf):
    from collections import Counter
    counts = list(Counter(shelf).values())
    
    # Function to compute GCD of a list of numbers
    def find_gcd_of_list(numbers):
        return reduce(gcd, numbers)
    
    overall_gcd = find_gcd_of_list(counts)
    
    return "YES" if overall_gcd > 1 else "NO"

9. NBA player statistics

import pandas as pd

# Load the dataset
url = "https://github.com/annIntv/sg_da/raw/main/nba_player_stats_2023_2024.csv"
df = pd.read_csv(url)

numeric_columns = df.select_dtypes(include=['float64', 'int64']).columns

# Compute correlation matrix
correlation_matrix = df[numeric_columns].corr()

# Get correlation of PTS with other metrics
pts_correlation = correlation_matrix['PTS'].sort_values(ascending=False)

# Extract top 5 correlated metrics (excluding PTS itself)
top_5_correlated = pts_correlation.index[1:6]

print(", ".join(top_5_correlated))

10. NBA player statistics


